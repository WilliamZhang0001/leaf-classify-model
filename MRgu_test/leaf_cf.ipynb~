{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffc75531",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "class MyCustomCNN(nn.Module):\n",
    "    def __init__(self, num_classes=39):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
    "        self.pool  = nn.MaxPool2d(2, 2)\n",
    "        self.fc1   = nn.Linear(64 * 56 * 56, 128)\n",
    "        self.fc2   = nn.Linear(128, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.conv1(x))\n",
    "        x = self.pool(x)                # 112 → 56\n",
    "        x = F.relu(self.conv2(x))\n",
    "        x = self.pool(x)                # 56 → 28\n",
    "        x = x.view(x.size(0), -1) \n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.fc2(x)\n",
    "        return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b69a422d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Fold 1/5 ---\n",
      "Epoch 01 | Train Loss: 1.0833 | Val Acc: 0.8208\n",
      "Epoch 02 | Train Loss: 0.4266 | Val Acc: 0.8775\n",
      "Epoch 03 | Train Loss: 0.2482 | Val Acc: 0.8649\n",
      "Epoch 04 | Train Loss: 0.1470 | Val Acc: 0.8722\n",
      "Epoch 05 | Train Loss: 0.1107 | Val Acc: 0.8296\n",
      "Epoch 06 | Train Loss: 0.0765 | Val Acc: 0.8774\n",
      "Epoch 07 | Train Loss: 0.0682 | Val Acc: 0.8706\n",
      "Epoch 08 | Train Loss: 0.0683 | Val Acc: 0.8758\n",
      "Epoch 09 | Train Loss: 0.0526 | Val Acc: 0.8461\n",
      "Epoch 10 | Train Loss: 0.0422 | Val Acc: 0.8815\n",
      "Epoch 11 | Train Loss: 0.0491 | Val Acc: 0.8813\n",
      "Epoch 12 | Train Loss: 0.0411 | Val Acc: 0.8797\n",
      "Epoch 13 | Train Loss: 0.0323 | Val Acc: 0.8679\n",
      "Epoch 14 | Train Loss: 0.0448 | Val Acc: 0.8630\n",
      "Epoch 15 | Train Loss: 0.0342 | Val Acc: 0.8713\n",
      "--- Fold 2/5 ---\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mKeyboardInterrupt\u001b[39m                         Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 49\u001b[39m\n\u001b[32m     47\u001b[39m outputs = model(imgs)\n\u001b[32m     48\u001b[39m loss    = criterion(outputs, targets)\n\u001b[32m---> \u001b[39m\u001b[32m49\u001b[39m \u001b[43mloss\u001b[49m\u001b[43m.\u001b[49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     50\u001b[39m optimizer.step()\n\u001b[32m     51\u001b[39m total_loss += loss.item() * imgs.size(\u001b[32m0\u001b[39m)\n",
      "\u001b[36mFile \u001b[39m\u001b[32md:\\HuaweiMoveData\\Users\\22705\\Desktop\\cs\\project\\work_space\\myenv\\Lib\\site-packages\\torch\\_tensor.py:648\u001b[39m, in \u001b[36mTensor.backward\u001b[39m\u001b[34m(self, gradient, retain_graph, create_graph, inputs)\u001b[39m\n\u001b[32m    638\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m    639\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[32m    640\u001b[39m         Tensor.backward,\n\u001b[32m    641\u001b[39m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[32m   (...)\u001b[39m\u001b[32m    646\u001b[39m         inputs=inputs,\n\u001b[32m    647\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m648\u001b[39m \u001b[43mtorch\u001b[49m\u001b[43m.\u001b[49m\u001b[43mautograd\u001b[49m\u001b[43m.\u001b[49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    649\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgradient\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m=\u001b[49m\u001b[43minputs\u001b[49m\n\u001b[32m    650\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32md:\\HuaweiMoveData\\Users\\22705\\Desktop\\cs\\project\\work_space\\myenv\\Lib\\site-packages\\torch\\autograd\\__init__.py:353\u001b[39m, in \u001b[36mbackward\u001b[39m\u001b[34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[39m\n\u001b[32m    348\u001b[39m     retain_graph = create_graph\n\u001b[32m    350\u001b[39m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[32m    351\u001b[39m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[32m    352\u001b[39m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m353\u001b[39m \u001b[43m_engine_run_backward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    354\u001b[39m \u001b[43m    \u001b[49m\u001b[43mtensors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    355\u001b[39m \u001b[43m    \u001b[49m\u001b[43mgrad_tensors_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    356\u001b[39m \u001b[43m    \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    357\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    358\u001b[39m \u001b[43m    \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    359\u001b[39m \u001b[43m    \u001b[49m\u001b[43mallow_unreachable\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[32m    360\u001b[39m \u001b[43m    \u001b[49m\u001b[43maccumulate_grad\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[32m    361\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32md:\\HuaweiMoveData\\Users\\22705\\Desktop\\cs\\project\\work_space\\myenv\\Lib\\site-packages\\torch\\autograd\\graph.py:824\u001b[39m, in \u001b[36m_engine_run_backward\u001b[39m\u001b[34m(t_outputs, *args, **kwargs)\u001b[39m\n\u001b[32m    822\u001b[39m     unregister_hooks = _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[32m    823\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m824\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mVariable\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_execution_engine\u001b[49m\u001b[43m.\u001b[49m\u001b[43mrun_backward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[32m    825\u001b[39m \u001b[43m        \u001b[49m\u001b[43mt_outputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\n\u001b[32m    826\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[32m    827\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m    828\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n",
      "\u001b[31mKeyboardInterrupt\u001b[39m: "
     ]
    }
   ],
   "source": [
    "import os\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader, Subset\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score\n",
    "import torch.optim as optim\n",
    "\n",
    "\n",
    "data_dir    = os.path.join(os.getcwd(), \"Plant_leave_diseases_dataset_with_augmentation\")\n",
    "num_classes = 39\n",
    "batch_size  = 32\n",
    "device      = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "k_folds     = 5\n",
    "num_epochs  = 15\n",
    "base_lr     = 1e-3\n",
    "\n",
    "\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224,224)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]),\n",
    "])\n",
    "full_ds = datasets.ImageFolder(root=data_dir, transform=transform)\n",
    "labels  = full_ds.targets\n",
    "skf     = StratifiedKFold(n_splits=k_folds, shuffle=True, random_state=42)\n",
    "\n",
    "fold_accs = []\n",
    "for fold, (train_idx, val_idx) in enumerate(skf.split(range(len(labels)), labels), 1):\n",
    "    print(f\"--- Fold {fold}/{k_folds} ---\")\n",
    "    train_ds = Subset(full_ds, train_idx)\n",
    "    val_ds   = Subset(full_ds, val_idx)\n",
    "    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=4)\n",
    "    val_loader   = DataLoader(val_ds,   batch_size=batch_size, shuffle=False, num_workers=4)\n",
    "    \n",
    "    model = MyCustomCNN(num_classes=num_classes).to(device)\n",
    "    \n",
    "    optimizer = optim.Adam(model.parameters(), lr=base_lr)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    \n",
    "\n",
    "    for epoch in range(1, num_epochs+1):\n",
    "\n",
    "        model.train()\n",
    "        total_loss = 0\n",
    "        for imgs, targets in train_loader:\n",
    "            imgs, targets = imgs.to(device), targets.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(imgs)\n",
    "            loss    = criterion(outputs, targets)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            total_loss += loss.item() * imgs.size(0)\n",
    "        train_loss = total_loss / len(train_ds)\n",
    "        \n",
    "        model.eval()\n",
    "        all_preds, all_labels = [], []\n",
    "        with torch.no_grad():\n",
    "            for imgs, targets in val_loader:\n",
    "                imgs = imgs.to(device)\n",
    "                logits = model(imgs)\n",
    "                preds  = logits.argmax(dim=1).cpu().tolist()\n",
    "                all_preds.extend(preds)\n",
    "                all_labels.extend(targets.tolist())\n",
    "        val_acc = accuracy_score(all_labels, all_preds)\n",
    "        \n",
    "        print(f\"Epoch {epoch:02d} | Train Loss: {train_loss:.4f} | Val Acc: {val_acc:.4f}\")\n",
    "    \n",
    "    fold_accs.append(val_acc)\n",
    "    torch.save(model.state_dict(), f\"custom_model_fold{fold}.pth\")\n",
    "\n",
    "print(f\"\\n{k_folds}-fold CV mean accuracy: {sum(fold_accs)/len(fold_accs):.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbe18065",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader, Subset\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score\n",
    "import torch.optim as optim\n",
    "\n",
    "\n",
    "data_dir    = os.path.join(os.getcwd(), \"Plant_leave_diseases_dataset_with_augmentation\")\n",
    "num_classes = 39\n",
    "batch_size  = 32\n",
    "device      = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "k_folds     = 5\n",
    "num_epochs  = 15\n",
    "base_lr     = 1e-3\n",
    "\n",
    "use_amp = True \n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224,224)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]),\n",
    "])\n",
    "full_ds = datasets.ImageFolder(root=data_dir, transform=transform)\n",
    "labels  = full_ds.targets\n",
    "skf     = StratifiedKFold(n_splits=k_folds, shuffle=True, random_state=42)\n",
    "\n",
    "fold_accs = []\n",
    "for fold, (train_idx, val_idx) in enumerate(skf.split(range(len(labels)), labels), 1):\n",
    "    print(f\"--- Fold {fold}/{k_folds} ---\")\n",
    "    train_ds = Subset(full_ds, train_idx)\n",
    "    val_ds   = Subset(full_ds, val_idx)\n",
    "    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=4)\n",
    "    val_loader   = DataLoader(val_ds,   batch_size=batch_size, shuffle=False, num_workers=4)\n",
    "    \n",
    "\n",
    "    model = MyCustomCNN(num_classes=num_classes).to(device)\n",
    "    \n",
    "    optimizer = optim.Adam(model.parameters(), lr=base_lr)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    scaler = torch.amp.GradScaler('cuda', enabled = use_amp)\n",
    "    \n",
    "    for epoch in range(1, num_epochs+1):\n",
    "\n",
    "        model.train()\n",
    "        total_loss = 0\n",
    "        for imgs, targets in train_loader:\n",
    "            imgs, targets = imgs.to(device), targets.to(device)\n",
    "\n",
    "            if not use_amp:\n",
    "                optimizer.zero_grad()\n",
    "                outputs = model(imgs)\n",
    "                loss    = criterion(outputs, targets)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "            else:\n",
    "                optimizer.zero_grad()\n",
    "                with torch.autocast(device_type=device, dtype=torch.float16):\n",
    "                    outputs = model(imgs)\n",
    "                    loss    = criterion(outputs, targets)\n",
    "                scaler.scale(loss).backward()\n",
    "                scaler.step(optimizer)\n",
    "                scaler.update()\n",
    "\n",
    "            total_loss += loss.item() * imgs.size(0)\n",
    "        train_loss = total_loss / len(train_ds)\n",
    "        \n",
    "        # 验证\n",
    "        model.eval()\n",
    "        all_preds, all_labels = [], []\n",
    "        with torch.no_grad():\n",
    "            for imgs, targets in val_loader:\n",
    "                imgs = imgs.to(device)\n",
    "                logits = model(imgs)\n",
    "                preds  = logits.argmax(dim=1).cpu().tolist()\n",
    "                all_preds.extend(preds)\n",
    "                all_labels.extend(targets.tolist())\n",
    "        val_acc = accuracy_score(all_labels, all_preds)\n",
    "        \n",
    "        print(f\"Epoch {epoch:02d} | Train Loss: {train_loss:.4f} | Val Acc: {val_acc:.4f}\")\n",
    "    \n",
    "    fold_accs.append(val_acc)\n",
    "    torch.save(model.state_dict(), f\"custom_model_fold{fold}.pth\")\n",
    "\n",
    "print(f\"\\n{k_folds}-fold CV mean accuracy: {sum(fold_accs)/len(fold_accs):.4f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
